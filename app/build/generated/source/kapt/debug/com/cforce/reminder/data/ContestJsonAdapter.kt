// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.cforce.reminder.`data`

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ContestJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Contest>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "name", "type", "phase",
      "frozen", "durationSeconds", "startTimeSeconds", "relativeTimeSeconds")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "type")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "frozen")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "startTimeSeconds")

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Contest").append(')') }

  public override fun fromJson(reader: JsonReader): Contest {
    var id: Long? = null
    var name: String? = null
    var type: String? = null
    var phase: String? = null
    var frozen: Boolean? = null
    var durationSeconds: Long? = null
    var startTimeSeconds: Long? = null
    var relativeTimeSeconds: Long? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> type = nullableStringAdapter.fromJson(reader)
        3 -> phase = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("phase", "phase",
            reader)
        4 -> frozen = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("frozen",
            "frozen", reader)
        5 -> durationSeconds = longAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("durationSeconds", "durationSeconds", reader)
        6 -> startTimeSeconds = nullableLongAdapter.fromJson(reader)
        7 -> relativeTimeSeconds = nullableLongAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Contest(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        type = type,
        phase = phase ?: throw Util.missingProperty("phase", "phase", reader),
        frozen = frozen ?: throw Util.missingProperty("frozen", "frozen", reader),
        durationSeconds = durationSeconds ?: throw Util.missingProperty("durationSeconds",
            "durationSeconds", reader),
        startTimeSeconds = startTimeSeconds,
        relativeTimeSeconds = relativeTimeSeconds
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Contest?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    longAdapter.toJson(writer, value_.id)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("type")
    nullableStringAdapter.toJson(writer, value_.type)
    writer.name("phase")
    stringAdapter.toJson(writer, value_.phase)
    writer.name("frozen")
    booleanAdapter.toJson(writer, value_.frozen)
    writer.name("durationSeconds")
    longAdapter.toJson(writer, value_.durationSeconds)
    writer.name("startTimeSeconds")
    nullableLongAdapter.toJson(writer, value_.startTimeSeconds)
    writer.name("relativeTimeSeconds")
    nullableLongAdapter.toJson(writer, value_.relativeTimeSeconds)
    writer.endObject()
  }
}
